{"ast":null,"code":"import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nconst options = {\n  order: ['navigator', 'htmlTag', 'path', 'subdomain'],\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'],\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n  htmlTag: document.documentElement,\n  checkWhitelist: true\n};\ni18n.use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n.use(LanguageDetector) // detect user language\n.use(initReactI18next) // pass the i18n instance to react-i18next.\n.init({\n  // fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n  debug: true,\n  // whitelist: availableLanguages,\n  detection: options,\n  interpolation: {\n    escapeValue: false\n  }\n});\nexport default i18n;","map":{"version":3,"names":["i18n","Backend","LanguageDetector","initReactI18next","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","debug","detection","interpolation","escapeValue"],"sources":["/home/doston/Desktop/figma_translate/src/i18n.js"],"sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\n\nconst options = {\n  order: [ 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'], \n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n  htmlTag: document.documentElement,\n  checkWhitelist: true\n}\n\ni18n\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n\n  .use(LanguageDetector) // detect user language\n\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\n\n  .init({\n    // fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n    debug: true,\n    // whitelist: availableLanguages,\n    detection: options,\n\n    interpolation: {\n      escapeValue: false\n    },\n  });\n\nexport default i18n;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D,SAASC,gBAAgB,QAAQ,eAAe;AAGhD,MAAMC,OAAO,GAAG;EACdC,KAAK,EAAE,CAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,CAAC;EAErDC,iBAAiB,EAAE,KAAK;EACxBC,YAAY,EAAE,SAAS;EACvBC,kBAAkB,EAAE,YAAY;EAChCC,mBAAmB,EAAE,CAAC;EACtBC,wBAAwB,EAAE,CAAC;EAE3BC,MAAM,EAAE,CAAC,cAAc,EAAE,QAAQ,CAAC;EAClCC,eAAe,EAAE,CAAC,QAAQ,CAAC;EAC3BC,aAAa,EAAE,EAAE;EACjBC,YAAY,EAAE,UAAU;EACxBC,OAAO,EAAEC,QAAQ,CAACC,eAAe;EACjCC,cAAc,EAAE;AAClB,CAAC;AAEDlB,IAAI,CACDmB,GAAG,CAAClB,OAAO,CAAC,CAAC;AAAA,CAEbkB,GAAG,CAACjB,gBAAgB,CAAC,CAAC;AAAA,CAEtBiB,GAAG,CAAChB,gBAAgB,CAAC,CAAC;AAAA,CAEtBiB,IAAI,CAAC;EACJ;EACAC,KAAK,EAAE,IAAI;EACX;EACAC,SAAS,EAAElB,OAAO;EAElBmB,aAAa,EAAE;IACbC,WAAW,EAAE;EACf;AACF,CAAC,CAAC;AAEJ,eAAexB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}